def finder = new FileNameFinder()

def pubVersion = file(finder.getFileNames(new File(projectDir, 'products').absolutePath, '**/version.txt').first()).text.trim()

def headerFile = file(finder.getFileNames(new File(projectDir, 'products').absolutePath, '**/*headers.zip').first())

def sourcesFile = file(finder.getFileNames(new File(projectDir, 'products').absolutePath, '**/*sources.zip').first())

def cppFiles = files(finder.getFileNames(new File(projectDir, 'products').absolutePath, '**/zipcppntcorentcore-classifier-*.zip'))

def jniFiles = files(finder.getFileNames(new File(projectDir, 'products').absolutePath, '**/jnijnintcorentcoreJNI-classifier-*.jar'))

def jarSources = file(finder.getFileNames(new File(projectDir, 'products').absolutePath, '**/*-sources.jar').first())

def jarJavadoc = file(finder.getFileNames(new File(projectDir, 'products').absolutePath, '**/*-javadoc.jar').first())

def jar = file(finder.getFileNames(new File(projectDir, 'products').absolutePath, '**/*-javaArtifact.jar').first())

cppFiles.each {
    println getClassifier(it)
}

apply plugin: 'maven-publish'

if (!project.hasProperty('repo')) {
    project.extensions.repo = 'development'
}

publishing {
    repositories {
        maven {
            url "${System.getProperty('user.home')}/releases/maven/${project.repo}"
        }
    }
}

def allOutput = file('outputs')

def allZipTask = project.tasks.create("ntcoreAllCppZip", Zip) {
    description = 'Creates a zip with all ntcore cpp artifacts'
    classifier = 'all'
    baseName = 'ntcore'
    destinationDir = allOutput
    duplicatesStrategy = 'exclude'

    cppFiles.each { 
        from project.zipTree(it)
    }
}

def allJniTask = project.tasks.create("ntcoreAllJNIJar", Jar) {
    description = 'Creates a jar with all ntcore jni artifacts'
    classifier = 'all'
    baseName = 'ntcoreJNI'
    destinationDir = allOutput
    duplicatesStrategy = 'exclude'

    jniFiles.each { 
        from project.zipTree(it)
    }
}

def baseArtifactId = 'ntcore'
def artifactGroupId = 'edu.wpi.first.ntcore'

publishing {
    publications {
        java(MavenPublication) {
            artifact jar

            artifact (jarJavadoc) {
                classifier 'javadoc'
            }

            artifact (jarSources) {
                classifier 'sources'
            }


            artifactId = "${baseArtifactId}-java"
            groupId artifactGroupId
            version pubVersion
        }
        cpp(MavenPublication) {
            artifact (headerFile) {
                classifier = 'headers'
            }

            artifact (sourcesFile) {
                classifier = 'sources'
            }

            artifact allZipTask

            cppFiles.each { file->
                artifact (file) {
                    classifier = getClassifier(file)
                }
            }

            artifactId = "${baseArtifactId}-cpp"
            groupId artifactGroupId
            version pubVersion
        }
        jni(MavenPublication) {
            jniFiles.each { file->
                artifact (file) {
                    classifier = getClassifier(file)
                }
            }

            artifact allJniTask

            artifactId = "${baseArtifactId}-jni"
            groupId artifactGroupId
            version pubVersion
        }
    }
}